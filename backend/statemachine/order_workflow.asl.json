{
  "Comment": "A state machine that handles the order purchasing workflow",
  "StartAt": "Get Cart Items",
  "States": {
    "Get Cart Items": {
      "Type": "Task",
      "Resource": "${GetUserCartFunctionArn}",
      "Next": "Check Listing Quantity",
      "Catch": [
        {
          "ErrorEquals": [
            "MissingParameterError"
          ],
          "Next": "ErrorHandler"
        }
      ]
    },
    "Check Listing Quantity": {
      "Type": "Task",
      "InputPath": "$.body",
      "Resource": "${CheckQuantityFunctionArn}",
      "Next": "Check Payment Detail",
      "Catch": [
        {
          "ErrorEquals": [
            "EmptyShoppingCartError",
            "PurchaseQuantityExceededError"
          ],
          "Next": "ErrorHandler"
        }
      ]
    },
    "Check Payment Detail": {
      "Type": "Task",
      "InputPath": "$.body",
      "Resource": "${CheckPaymentFunctionArn}",
      "Next": "Valid Payment?",
      "Catch": [
        {
          "ErrorEquals": [
            "EmptyShoppingCartError",
            "PurchaseQuantityExceededError"
          ],
          "Next": "ErrorHandler"
        }
      ]
    },
    "Valid Payment?": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.body.ValidPayment",
          "BooleanEquals": true,
          "Next": "Send Task Token"
        }
      ],
      "Default": "Parallel Wait Token"
    },
    "Send Task Token": {
      "Type": "Task",
      "InputPath": "$.body",
      "Resource": "${SNSSendTokenFunctionArn}",
      "Next": "Simulate Payment"
    },
    "Parallel Wait Token": {
      "Type": "Parallel",
      "Branches": [
        {
          "StartAt": "Send Wait Token",
          "States": {
            "Send Wait Token": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
              "Parameters": {
                "Payload": {
                  "input.$": "$",
                  "taskToken.$": "$$.Task.Token"
                },
                "FunctionName": "${SNSWaitForTokenFunctionName}"
              },
              "End": true
            }
          }
        },
        {
          "StartAt": "Pass Input",
          "States": {
            "Pass Input": {
              "Type": "Pass",
              "End": true
            }
          }
        }
      ],
      "ResultPath": "$.results",
      "Next": "Update Payment ID"
    },
    "Update Payment ID": {
      "Type": "Task",
      "InputPath": "$.results",
      "Resource": "${AppendSNSTokenFunctionArn}",
      "Next": "Simulate Payment"
    },
    "Simulate Payment": {
      "Type": "Task",
      "InputPath": "$.body",
      "Resource": "${PaymentSimulationFunctionArn}",
      "Next": "Payment Approved?"
    },
    "Payment Approved?": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.payment_status",
          "StringMatches": "Approved",
          "Next": "Create Order"
        }
      ],
      "Default": "Payment Fail"
    },
    "Payment Fail": {
      "Type": "Task",
      "Resource": "${PaymentFailErrorFunctionArn}",
      "Catch": [
        {
          "ErrorEquals": [
            "PaymentFailureError"
          ],
          "Next": "ErrorHandler"
        }
      ],
      "Next": "ErrorHandler"
    },
    "Create Order": {
      "Type": "Task",
      "InputPath": "$",
      "Resource": "${CreateOrderFunctionArn}",
      "Next": "Empty Shopping Cart"
    },
    "Empty Shopping Cart": {
      "Type": "Task",
      "InputPath": "$",
      "Resource": "${ClearShoppingCartFunctionArn}",
      "Next": "Checkout Success"
    },
    "ErrorHandler": {
      "Type": "Task",
      "InputPath": "$",
      "Resource": "${StepFunctionErrorHandlerFunctionArn}",
      "End": true
    },
    "Checkout Success": {
      "Type": "Succeed"
    }
  }
}