AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  backend

  Sample SAM Template for backend

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3
    MemorySize: 128
  Api:
    Cors:
      AllowMethods: "'GET,POST,OPTIONS'"
      AllowHeaders: "'content-type'"
      AllowOrigin: "'*'"
Parameters:
  PipelineRole:
    Type: String

Resources:
  FrontendBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      PolicyDocument:
        Id: MyPolicy
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: "*"
            Action: "s3:GetObject"
            Resource: !Sub
              - "arn:aws:s3:::${Bucket}/*"
              - Bucket: !Ref FrontendBucket
          - Effect: Allow
            Principal:
              AWS:
                - !Ref PipelineRole
            Action:
              - "s3:PutObject"
              - "s3:DeleteObject"
            Resource: !Sub
              - "arn:aws:s3:::${Bucket}/*"
              - Bucket: !Ref FrontendBucket
      Bucket: !Ref FrontendBucket
  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: CloudFront access identity
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - Id: FrontendBucket
            DomainName: !GetAtt FrontendBucket.RegionalDomainName
            S3OriginConfig:
              OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}"
          - Id: Backend
            DomainName: !Sub "${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com"
            OriginPath: "/Prod"
            CustomOriginConfig:
              OriginProtocolPolicy: https-only
        DefaultCacheBehavior:
          TargetOriginId: FrontendBucket
          ViewerProtocolPolicy: redirect-to-https
          ForwardedValues:
            QueryString: true
        CacheBehaviors:
          - TargetOriginId: Backend
            PathPattern: "api/*"
            DefaultTTL: 0
            MinTTL: 0
            MaxTTL: 0
            ViewerProtocolPolicy: https-only
            AllowedMethods: [GET, HEAD, OPTIONS, PUT, PATCH, POST, DELETE]
            ForwardedValues:
              QueryString: true
        Enabled: true
        DefaultRootObject: index.html
  OrderStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Type: EXPRESS #why are we using express?
      DefinitionUri: statemachine/order_workflow.asl.json
      DefinitionSubstitutions:
        CartCheckerFunctionArn: !GetAtt CartCheckerFunction.Arn
      Events:
        OrderApiEvent:
          Type: Api
          Properties:
            Path: /api/order/checkout # Ensure api is proxied with /api/*
            Method: post
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref CartCheckerFunction
  CartCheckerFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
    Properties:
      CodeUri: functions/cart-checker/
      Handler: app.lambdaHandler
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      Events:
        Listings:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /api/listings/test # Testing
            Method: get
  FrontendBucket:
    Type: AWS::S3::Bucket
  ListingsFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: functions/listings/
      Handler: app.lambdaHandler
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      Events:
        Listings:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /api/listings # Ensure api is proxied with /api/*
            Method: get
  ListingFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: listing/
      Handler: app.lambdaHandler
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      Events:
        Listings:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /api/listing-old/{listingid} # Ensure api is proxied with /api/*
            Method: get
  LoginFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: functions/login/
      Handler: app.lambdaHandler
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      Events:
        Login:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /api/login/{gmail} # Ensure api is proxied with /api/*
            Method: get
  SignUpFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: functions/signup/
      Handler: app.lambdaHandler
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      Events:
        SignUp:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /api/signup # Ensure api is proxied with /api/*
            Method: get # TODO: change this to PUT

  ##  ----------------- Database Config -----------------
  rdsEC2VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "192.168.0.0/16"
      Tags: [{ "Key": "Name", "Value": "rdsEC2VPC" }]
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: "us-west-2a"
      VpcId:
        Ref: "rdsEC2VPC"
      CidrBlock: "192.168.1.0/24"
      Tags: [{ "Key": "Name", "Value": "PrivateSubnet1" }]
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: "us-west-2b"
      VpcId:
        Ref: "rdsEC2VPC"
      CidrBlock: "192.168.2.0/24"
      Tags: [{ "Key": "Name", "Value": "PrivateSubnet2" }]
  rdsDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "Subnets for RDS"
      SubnetIds: [{ "Ref": "PrivateSubnet1" }, { "Ref": "PrivateSubnet2" }]
      Tags: [{ "Key": "Name", "Value": "rdsDBSubnetGroup" }]
  rdsDBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: 20
      DBInstanceClass: "db.t2.micro"
      AllowMajorVersionUpgrade: "false"
      AutoMinorVersionUpgrade: "false"
      BackupRetentionPeriod: "7"
      DBInstanceIdentifier: "CPSC319RDS"
      DBName: "databaseAmazonianPrime"
      VPCSecurityGroups: [{ "Ref": "rdsSecurityGroup" }]
      DBSubnetGroupName:
        Ref: "rdsDBSubnetGroup"
      Engine: "MySQL"
      EngineVersion: "8.0.28"
      MasterUsername: "user"
      MasterUserPassword: "Password1234"
      MultiAZ: "false"
      Port: "3306"
      PubliclyAccessible: "false"
      StorageType: "gp2"
      Tags: [{ "Key": "Name", "Value": "rdsDBInstance" }]
  rdsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow RDS Connections"
      SecurityGroupIngress:
        [
          {
            "IpProtocol": "tcp",
            "FromPort": "3306",
            "ToPort": "3306",
            "CidrIp": "0.0.0.0/0",
          },
          {
            "SourceSecurityGroupId": { "Ref": "lambdaSecurityGroup" },
            "IpProtocol": "tcp",
            "FromPort": "3306",
            "ToPort": "3306",
          },
        ]
      SecurityGroupEgress:
        [
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": "0.0.0.0/0",
          },
        ]
      VpcId:
        Ref: "rdsEC2VPC"
      Tags: [{ "Key": "Name", "Value": "rdsSecurityGroup" }]
  lambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow Lambda Connection to RDS"
      SecurityGroupEgress:
        [
          {
            "IpProtocol": "tcp",
            "FromPort": "3306",
            "ToPort": "3306",
            "CidrIp": "0.0.0.0/0",
          },
        ]
      VpcId:
        Ref: "rdsEC2VPC"
      Tags: [{ "Key": "Name", "Value": "lambdaSecurityGroup" }]
  # ---- Database Functions ------
  DBInitFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: functions/db-init/
      Handler: app.lambdaHandler
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      VpcConfig:
        SecurityGroupIds: [{ "Ref": "lambdaSecurityGroup" }]
        SubnetIds: [{ "Ref": "PrivateSubnet1" }, { "Ref": "PrivateSubnet2" }]
      Environment:
        Variables:
          DatabaseAddress: !GetAtt rdsDBInstance.Endpoint.Address
      Policies:
        - Statement:
            - Sid: RDSLambdaConnectPolicy
              Effect: Allow
              Action:
                - rds-db:connect
              Resource: "*"
  primer:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs12.x
      InlineCode: |
        var aws = require('aws-sdk');
        var response = require('cfn-response');
        exports.handler = function(event, context) {
            // For Delete requests, immediately send a SUCCESS response.
            if (event.RequestType == "Delete") {
                response.send(event, context, "SUCCESS");
                return;
            }
            var responseStatus = "FAILED";
            var responseData = {};
            var functionName = event.ResourceProperties.FunctionName
            var lambda = new aws.Lambda();
            lambda.invoke({ FunctionName: functionName }, function(err, invokeResult) {
                if (err) {
                    responseData = {Error: "Invoke call failed"};
                    console.log(responseData.Error + ":\n", err);
                }
                else responseStatus = "SUCCESS";
                response.send(event, context, responseStatus, responseData);
            });
        };
      Description: Invoke a function to create a log stream.
      MemorySize: 128
      Timeout: 15
      Tracing: Active
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref DBInitFunction
  primerinvoke:
    Type: AWS::CloudFormation::CustomResource
    Version: "1.0"
    DependsOn:
      - rdsDBInstance
      - DBInitFunction
    Properties:
      ServiceToken: !GetAtt primer.Arn
      FunctionName: !Ref DBInitFunction

  DBSQueryFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: functions/db-query-table/
      Handler: app.lambdaHandler
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      Events:
        Listings:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /api/db/tables # Ensure api is proxied with /api/*
            Method: get
      VpcConfig:
        SecurityGroupIds: [{ "Ref": "lambdaSecurityGroup" }]
        SubnetIds: [{ "Ref": "PrivateSubnet1" }, { "Ref": "PrivateSubnet2" }]
      Environment:
        Variables:
          DatabaseAddress: !GetAtt rdsDBInstance.Endpoint.Address
      Policies:
        - Statement:
            - Sid: RDSLambdaConnectPolicy
              Effect: Allow
              Action:
                - rds-db:connect
              Resource: "*"

  UpdateUserFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: functions/update-user/
      Handler: app.lambdaHandler
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      Events:
        Listings:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /api/user/update # Ensure api is proxied with /api/*
            Method: post
      VpcConfig:
        SecurityGroupIds: [{ "Ref": "lambdaSecurityGroup" }]
        SubnetIds: [{ "Ref": "PrivateSubnet1" }, { "Ref": "PrivateSubnet2" }]
      Environment:
        Variables:
          DatabaseAddress: !GetAtt rdsDBInstance.Endpoint.Address
      Policies:
        - Statement:
            - Sid: RDSLambdaConnectPolicy
              Effect: Allow
              Action:
                - rds-db:connect
              Resource: "*"
      Layers:
        - !Ref DBSharedLayer
        - !Ref NodeDependenciesLayer
  GetUserFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: functions/get-user/
      Handler: app.lambdaHandler
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      Events:
        http:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /api/user/{token} # Ensure api is proxied with /api/*
            Method: get
      VpcConfig:
        SecurityGroupIds: [{ "Ref": "lambdaSecurityGroup" }]
        SubnetIds: [{ "Ref": "PrivateSubnet1" }, { "Ref": "PrivateSubnet2" }]
      Environment:
        Variables:
          DatabaseAddress: !GetAtt rdsDBInstance.Endpoint.Address
      Policies:
        - Statement:
            - Sid: RDSLambdaConnectPolicy
              Effect: Allow
              Action:
                - rds-db:connect
              Resource: "*"
      Layers:
        - !Ref DBSharedLayer
        - !Ref NodeDependenciesLayer
  GetListingFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: functions/get-listings/
      Handler: app.lambdaHandler
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      Events:
        http:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /api/listing # Ensure api is proxied with /api/*
            Method: get
            RequestParameters:
              - method.request.querystring.name:
                  Required: false
                  Caching: false
              - method.request.querystring.category:
                  Required: false
                  Caching: false
              - method.request.querystring.offset:
                  Required: false
                  Caching: false
              - method.request.querystring.limit:
                  Required: false
                  Caching: false
      VpcConfig:
        SecurityGroupIds: [{ "Ref": "lambdaSecurityGroup" }]
        SubnetIds: [{ "Ref": "PrivateSubnet1" }, { "Ref": "PrivateSubnet2" }]
      Environment:
        Variables:
          DatabaseAddress: !GetAtt rdsDBInstance.Endpoint.Address
      Policies:
        - Statement:
            - Sid: RDSLambdaConnectPolicy
              Effect: Allow
              Action:
                - rds-db:connect
              Resource: "*"
      Layers:
        - !Ref DBSharedLayer
        - !Ref NodeDependenciesLayer

  CreateListingFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: functions/create-listing/
      Handler: app.lambdaHandler
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      Events:
        http:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /api/listing # Ensure api is proxied with /api/*
            Method: post
      VpcConfig:
        SecurityGroupIds: [{ "Ref": "lambdaSecurityGroup" }]
        SubnetIds: [{ "Ref": "PrivateSubnet1" }, { "Ref": "PrivateSubnet2" }]
      Environment:
        Variables:
          DatabaseAddress: !GetAtt rdsDBInstance.Endpoint.Address
      Policies:
        - Statement:
            - Sid: RDSLambdaConnectPolicy
              Effect: Allow
              Action:
                - rds-db:connect
              Resource: "*"
      Layers:
        - !Ref DBSharedLayer
        - !Ref NodeDependenciesLayer

  UpdateListingFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: functions/update-listing/
      Handler: app.lambdaHandler
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      Events:
        http:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /api/listing/update # Ensure api is proxied with /api/*
            Method: put
      VpcConfig:
        SecurityGroupIds: [{ "Ref": "lambdaSecurityGroup" }]
        SubnetIds: [{ "Ref": "PrivateSubnet1" }, { "Ref": "PrivateSubnet2" }]
      Environment:
        Variables:
          DatabaseAddress: !GetAtt rdsDBInstance.Endpoint.Address
      Policies:
        - Statement:
            - Sid: RDSLambdaConnectPolicy
              Effect: Allow
              Action:
                - rds-db:connect
              Resource: "*"
      Layers:
        - !Ref DBSharedLayer
        - !Ref NodeDependenciesLayer

  AddPaymentFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: functions/add-payment/
      Handler: app.lambdaHandler
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      Events:
        Listings:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /api/user/payment # Ensure api is proxied with /api/*
            Method: post
      VpcConfig:
        SecurityGroupIds: [{ "Ref": "lambdaSecurityGroup" }]
        SubnetIds: [{ "Ref": "PrivateSubnet1" }, { "Ref": "PrivateSubnet2" }]
      Environment:
        Variables:
          DatabaseAddress: !GetAtt rdsDBInstance.Endpoint.Address
      Policies:
        - Statement:
            - Sid: RDSLambdaConnectPolicy
              Effect: Allow
              Action:
                - rds-db:connect
              Resource: "*"
      Layers:
        - !Ref DBSharedLayer
        - !Ref NodeDependenciesLayer

  AddBankingFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: functions/add-banking/
      Handler: app.lambdaHandler
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      Events:
        Listings:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /api/user/banking # Ensure api is proxied with /api/*
            Method: post
      VpcConfig:
        SecurityGroupIds: [{ "Ref": "lambdaSecurityGroup" }]
        SubnetIds: [{ "Ref": "PrivateSubnet1" }, { "Ref": "PrivateSubnet2" }]
      Environment:
        Variables:
          DatabaseAddress: !GetAtt rdsDBInstance.Endpoint.Address
      Policies:
        - Statement:
            - Sid: RDSLambdaConnectPolicy
              Effect: Allow
              Action:
                - rds-db:connect
              Resource: "*"
      Layers:
        - !Ref DBSharedLayer
        - !Ref NodeDependenciesLayer

  GetBankingFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: functions/get-banking/
      Handler: app.lambdaHandler
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      Events:
        http:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /api/user/banking/{id} # Ensure api is proxied with /api/*
            Method: get
      VpcConfig:
        SecurityGroupIds: [{ "Ref": "lambdaSecurityGroup" }]
        SubnetIds: [{ "Ref": "PrivateSubnet1" }, { "Ref": "PrivateSubnet2" }]
      Environment:
        Variables:
          DatabaseAddress: !GetAtt rdsDBInstance.Endpoint.Address
      Policies:
        - Statement:
            - Sid: RDSLambdaConnectPolicy
              Effect: Allow
              Action:
                - rds-db:connect
              Resource: "*"
      Layers:
        - !Ref DBSharedLayer
        - !Ref NodeDependenciesLayer

  AddAddressFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: functions/add-address/
      Handler: app.lambdaHandler
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      Events:
        Listings:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /api/user/address # Ensure api is proxied with /api/*
            Method: post
      VpcConfig:
        SecurityGroupIds: [{ "Ref": "lambdaSecurityGroup" }]
        SubnetIds: [{ "Ref": "PrivateSubnet1" }, { "Ref": "PrivateSubnet2" }]
      Environment:
        Variables:
          DatabaseAddress: !GetAtt rdsDBInstance.Endpoint.Address
      Policies:
        - Statement:
            - Sid: RDSLambdaConnectPolicy
              Effect: Allow
              Action:
                - rds-db:connect
              Resource: "*"
      Layers:
        - !Ref DBSharedLayer
        - !Ref NodeDependenciesLayer

  DBSharedLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: DBSharedLayer
      Description: Some code to share with the other lambda functions
      ContentUri: ./helpers
      CompatibleRuntimes:
        - nodejs14.x
      RetentionPolicy: Delete
  NodeDependenciesLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: NodeDependenciesLayer
      Description: Base layer for node apps
      ContentUri: ./layers-dependencies
      CompatibleRuntimes:
        - nodejs14.x
      RetentionPolicy: Delete

  # ---- S3 Bucket Image Upload
  ImageBucket:
    Type: AWS::S3::Bucket
  ImageBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ImageBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: "*"
            Action:
              - s3:GetObject
            Resource: !Sub "arn:aws:s3:::${ImageBucket}/*"

  ImageUploadLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: S3BucketAccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource: !Sub "arn:aws:s3:::${ImageBucket}/*"
  UploadImageFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: functions/upload-function/
      Handler: app.lambdaHandler
      Role: !GetAtt ImageUploadLambdaRole.Arn
      Runtime: nodejs14.x
      Environment:
        Variables:
          S3_BUCKET_NAME: !Ref ImageBucket
      Architectures:
        - x86_64
      Events:
        ImageUpload:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /api/image/ # Ensure api is proxied with /api/*
            Method: post
  GetListingByIdFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: functions/get-listing-id/
      Handler: app.lambdaHandler
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      Events:
        Listings:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /api/listing/{id} # Ensure api is proxied with /api/*
            Method: get
      VpcConfig:
        SecurityGroupIds: [{ "Ref": "lambdaSecurityGroup" }]
        SubnetIds: [{ "Ref": "PrivateSubnet1" }, { "Ref": "PrivateSubnet2" }]
      Environment:
        Variables:
          DatabaseAddress: !GetAtt rdsDBInstance.Endpoint.Address
      Policies:
        - Statement:
            - Sid: RDSLambdaConnectPolicy
              Effect: Allow
              Action:
                - rds-db:connect
              Resource: "*"
      Layers:
        - !Ref DBSharedLayer
        - !Ref NodeDependenciesLayer
  DeleteListingByIdFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: functions/delete-listing-id/
      Handler: app.lambdaHandler
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      Events:
        Listings:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /api/listing/delete/{ListingId} # Ensure api is proxied with /api/*
            Method: delete
      VpcConfig:
        SecurityGroupIds: [{ 'Ref': 'lambdaSecurityGroup' }]
        SubnetIds: [{ 'Ref': 'PrivateSubnet1' }, { 'Ref': 'PrivateSubnet2' }]
      Environment:
        Variables:
          DatabaseAddress: !GetAtt rdsDBInstance.Endpoint.Address
      Policies:
        - Statement:
            - Sid: RDSLambdaConnectPolicy
              Effect: Allow
              Action:
                - rds-db:connect
              Resource: "*"
              Resource: '*'
      Layers:
        - !Ref DBSharedLayer
        - !Ref NodeDependenciesLayer
Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  GetUserApi:
    Description: "API Gateway endpoint URL for Prod stage for GetUser function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/api/user/:token"
  GetUserFunction:
    Description: "GetUser Lambda Function ARN"
    Value: !Sub GetUserFunction.Arn
  GetUserIamRole:
    Description: "Implicit IAM Role created for GetUser function"
    Value: !Sub GetUserFunctionRole.Arn
  ListingsApi:
    Description: "API Gateway endpoint URL for Prod stage for Listings function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/api/listings/"
  ListingsFunction:
    Description: "Listings Lambda Function ARN"
    Value: !GetAtt ListingsFunction.Arn
  ListingsFunctionIamRole:
    Description: "Implicit IAM Role created for Listings function"
    Value: !GetAtt ListingsFunctionRole.Arn
  SignUpApi:
    Description: "API Gateway endpoint URL for Prod stage for SignUp function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/api/signup/"
  SignUpFunction:
    Description: "SignUp Lambda Function ARN"
    Value: !GetAtt SignUpFunction.Arn
  SignUpFunctionIamRole:
    Description: "Implicit IAM Role created for SignUp function"
    Value: !GetAtt SignUpFunctionRole.Arn
  ListingApi:
    Description: "API Gateway endpoint URL for Prod stage for Listings function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/api/listing/:listingid"
  ListingFunction:
    Description: "Listing Lambda Function ARN"
    Value: !GetAtt ListingFunction.Arn
  ListingFunctionIamRole:
    Description: "Implicit IAM Role created for Listing function"
    Value: !GetAtt ListingFunctionRole.Arn
  LoginApi:
    Description: "API Gateway endpoint URL for Prod stage for Login function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/api/login/:gmail"
  LoginFunction:
    Description: "Login Lambda Function ARN"
    Value: !GetAtt LoginFunction.Arn
  LoginFunctionIamRole:
    Description: "Implicit IAM Role created for Login function"
    Value: !GetAtt LoginFunctionRole.Arn
  Website:
    Value: !GetAtt CloudFrontDistribution.DomainName
