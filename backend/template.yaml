AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  backend

  Sample SAM Template for backend

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3
    MemorySize: 128
  Api:
    Cors:
      AllowMethods: "'GET,POST,OPTIONS'"
      AllowHeaders: "'content-type'"
      AllowOrigin: "'*'"
Resources:
  FrontendBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      PolicyDocument:
        Id: MyPolicy
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: "*"
            Action: "s3:GetObject"
            Resource: !Sub
              - "arn:aws:s3:::${Bucket}/*"
              - Bucket: !Ref FrontendBucket
      Bucket: !Ref FrontendBucket
  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: CloudFront access identity
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - Id: FrontendBucket
            DomainName: !GetAtt FrontendBucket.RegionalDomainName
            S3OriginConfig:
              OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}"
          - Id: Backend
            DomainName: !Sub "${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com"
            OriginPath: "/Prod"
            CustomOriginConfig:
              OriginProtocolPolicy: https-only
        DefaultCacheBehavior:
          TargetOriginId: FrontendBucket
          ViewerProtocolPolicy: redirect-to-https
          ForwardedValues:
            QueryString: true
        CacheBehaviors:
          - TargetOriginId: Backend
            PathPattern: "api/*"
            DefaultTTL: 0
            MinTTL: 0
            MaxTTL: 0
            ViewerProtocolPolicy: https-only
            AllowedMethods: [GET, HEAD, OPTIONS, PUT, PATCH, POST, DELETE]
            ForwardedValues:
              QueryString: true
        Enabled: true
        DefaultRootObject: index.html
  OrderStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Type: EXPRESS #why are we using express?
      DefinitionUri: statemachine/order_workflow.asl.json
      DefinitionSubstitutions:
        CartCheckerFunctionArn: !GetAtt CartCheckerFunction.Arn
      Events:
        OrderApiEvent:
          Type: Api
          Properties:
            Path: /api/order/checkout # Ensure api is proxied with /api/*
            Method: post
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref CartCheckerFunction
  CartCheckerFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
    Properties:
      CodeUri: functions/cart-checker/
      Handler: app.lambdaHandler
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      Events:
        Listings:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /api/listings/test # Testing
            Method: get
  FrontendBucket:
    Type: AWS::S3::Bucket
  ListingsFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: functions/listings/
      Handler: app.lambdaHandler
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      Events:
        Listings:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /api/listings # Ensure api is proxied with /api/*
            Method: get
  ListingFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: listing/
      Handler: app.lambdaHandler
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      Events:
        Listings:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /api/listing/{listingid} # Ensure api is proxied with /api/*
            Method: get
  LoginFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: functions/login/
      Handler: app.lambdaHandler
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      Events:
        Login:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /api/login/{gmail} # Ensure api is proxied with /api/*
            Method: get
  SignUpFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: functions/signup/
      Handler: app.lambdaHandler
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      Events:
        SignUp:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /api/signup # Ensure api is proxied with /api/*
            Method: get # TODO: change this to PUT
  # ---- S3 Bucket Image Upload
  ImageBucket:
    Type: AWS::S3::Bucket
  ImageUploadLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: '/'
      Policies:
        - PolicyName: S3BucketAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource: !Sub 'arn:aws:s3:::${ImageBucket}/*'
  UploadImageFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: functions/upload-function/
      Handler: app.lambdaHandler
      Role: !GetAtt ImageUploadLambdaRole.Arn
      Runtime: nodejs14.x
      Environment:
        Variables:
          S3_BUCKET_NAME: !Ref ImageBucket
      Architectures:
        - x86_64
      Events:
        ImageUpload:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /api/image/ # Ensure api is proxied with /api/*
            Method: post
Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  ListingsApi:
    Description: "API Gateway endpoint URL for Prod stage for Listings function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/api/listings/"
  ListingsFunction:
    Description: "Listings Lambda Function ARN"
    Value: !GetAtt ListingsFunction.Arn
  ListingsFunctionIamRole:
    Description: "Implicit IAM Role created for Listings function"
    Value: !GetAtt ListingsFunctionRole.Arn
  SignUpApi:
    Description: "API Gateway endpoint URL for Prod stage for SignUp function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/api/signup/"
  SignUpFunction:
    Description: "SignUp Lambda Function ARN"
    Value: !GetAtt SignUpFunction.Arn
  SignUpFunctionIamRole:
    Description: "Implicit IAM Role created for SignUp function"
    Value: !GetAtt SignUpFunctionRole.Arn
  ListingApi:
    Description: "API Gateway endpoint URL for Prod stage for Listings function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/api/listing/:listingid"
  ListingFunction:
    Description: "Listing Lambda Function ARN"
    Value: !GetAtt ListingFunction.Arn
  ListingFunctionIamRole:
    Description: "Implicit IAM Role created for Listing function"
    Value: !GetAtt ListingFunctionRole.Arn
  LoginApi:
    Description: "API Gateway endpoint URL for Prod stage for Login function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/api/login/:gmail"
  LoginFunction:
    Description: "Login Lambda Function ARN"
    Value: !GetAtt LoginFunction.Arn
  LoginFunctionIamRole:
    Description: "Implicit IAM Role created for Login function"
    Value: !GetAtt LoginFunctionRole.Arn
  Website:
    Value: !GetAtt CloudFrontDistribution.DomainName